{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"cel-extensions/","title":"CEL extensions","text":"<p>The CEL engine used to evaluate variables and authorization rules has been extended with libraries to help processing the input <code>CheckRequest</code> and forge the corresponding <code>CheckResponse</code>.</p>"},{"location":"cel-extensions/#envoy-plugin-libraries","title":"Envoy plugin libraries","text":"<ul> <li>Auth</li> <li>Http</li> <li>Jwt</li> </ul>"},{"location":"cel-extensions/#common-libraries","title":"Common libraries","text":"<p>The libraries below are common CEL extensions enabled in the Kyverno Authz Server CEL engine:</p> <ul> <li>Optional types</li> <li>Cross type numeric comparisons</li> <li>Bindings</li> <li>Encoders</li> <li>Lists</li> <li>Math</li> <li>Protos</li> <li>Sets</li> <li>Strings</li> </ul>"},{"location":"cel-extensions/#kubernetes-libraries","title":"Kubernetes libraries","text":"<p>The libraries below are imported from Kubernetes:</p> <ul> <li>CIDR</li> <li>Format</li> <li>IP</li> <li>Lists</li> <li>Regex</li> <li>URL</li> </ul>"},{"location":"cel-extensions/jwt/","title":"Jwt library","text":"<p>Policies have native functionality to decode and verify the contents of JWT tokens in order to enforce additional authorization logic on requests.</p>"},{"location":"cel-extensions/jwt/#types","title":"Types","text":""},{"location":"cel-extensions/jwt/#token","title":"<code>&lt;Token&gt;</code>","text":"<p>CEL Type / Proto <code>jwt.Token</code></p> Field CEL Type / Proto Docs Valid <code>bool</code> Header <code>google.protobuf.Struct</code> Docs Claims <code>google.protobuf.Struct</code> Docs"},{"location":"cel-extensions/jwt/#functions","title":"Functions","text":""},{"location":"cel-extensions/jwt/#jwtdecode","title":"jwt.Decode","text":"<p>The <code>jwt.Decode</code> function decodes and validates a JWT token. It accepts two arguments: the token and the secret to verify the signature.</p>"},{"location":"cel-extensions/jwt/#signature-and-overloads","title":"Signature and overloads","text":"<pre><code>jwt.Decode(&lt;string&gt; token, &lt;string&gt; key) -&gt; &lt;Token&gt;\n</code></pre>"},{"location":"cel-extensions/jwt/#example","title":"Example","text":"<pre><code>jwt.Decode(\"eyJhbGciOiJIUzI1NiI....\", \"secret\")\n</code></pre>"},{"location":"reference/","title":"Reference documentation","text":"<p>Info</p> <p>Select an item in the navigation menu to browse a specific page.</p>"},{"location":"reference/json-schemas/","title":"JSON schemas","text":"<p>JSON schemas for policies are available:</p> <ul> <li>AuthorizationPolicy (v1alpha1)</li> </ul> <p>They can be used to enable validation and autocompletion in your IDE.</p>"},{"location":"reference/json-schemas/#vs-code","title":"VS code","text":"<p>In VS code, simply add a comment on top of your YAML resources.</p>"},{"location":"reference/json-schemas/#authorizationpolicy","title":"AuthorizationPolicy","text":"<pre><code># yaml-language-server: $schema=https://github.com/eddycharly/generic-auth-server/blob/main/.schemas/json/authorizationpolicy-generic-v1alpha1.json\napiVersion: generic.kyverno.io/v1alpha1\nkind: AuthorizationPolicy\nmetadata:\n  name: demo-policy.example.com\nspec:\n  authorizations:\n  - expression: &gt;\n      \"bar\" in object.Header(\"foo\")\n        ? auth\n            .Response(401)\n            .WithBody(\"bye\")\n            .WithHeader(\"xxx\", \"yyy\")\n        : auth\n            .Response(200)\n</code></pre>"},{"location":"reference/apis/policy.v1alpha1/","title":"policy (v1alpha1)","text":""},{"location":"reference/apis/policy.v1alpha1/#resource-types","title":"Resource Types","text":"<ul> <li>AuthorizationPolicy</li> </ul>"},{"location":"reference/apis/policy.v1alpha1/#generic-kyverno-io-v1alpha1-AuthorizationPolicy","title":"AuthorizationPolicy","text":"<p>AuthorizationPolicy defines an authorization policy resource</p> Field Type Required Inline Description <code>apiVersion</code> <code>string</code> <code>generic.kyverno.io/v1alpha1</code> <code>kind</code> <code>string</code> <code>AuthorizationPolicy</code> <code>metadata</code> <code>meta/v1.ObjectMeta</code> No description provided. <code>spec</code> <code>AuthorizationPolicySpec</code> No description provided."},{"location":"reference/apis/policy.v1alpha1/#generic-kyverno-io-v1alpha1-Authorization","title":"Authorization","text":"<p>Appears in:</p> <ul> <li>AuthorizationPolicySpec</li> </ul> <p>Authorization defines an authorization policy rule</p> Field Type Required Inline Description <code>expression</code> <code>string</code> <p>Expression represents the expression which will be evaluated by CEL. ref: https://github.com/google/cel-spec CEL expressions have access to CEL variables as well as some other useful variables: - 'object' - The incoming request. CEL expressions are expected to return an model Response.</p>"},{"location":"reference/apis/policy.v1alpha1/#generic-kyverno-io-v1alpha1-AuthorizationPolicySpec","title":"AuthorizationPolicySpec","text":"<p>Appears in:</p> <ul> <li>AuthorizationPolicy</li> </ul> <p>AuthorizationPolicySpec defines the spec of an authorization policy</p> Field Type Required Inline Description <code>failurePolicy</code> <code>admissionregistration/v1.FailurePolicyType</code> <p>FailurePolicy defines how to handle failures for the policy. Failures can occur from CEL expression parse errors, type check errors, runtime errors and invalid or mis-configured policy definitions. FailurePolicy does not define how validations that evaluate to false are handled. Allowed values are Ignore or Fail. Defaults to Fail.</p> <code>variables</code> <code>[]admissionregistration/v1.Variable</code> <p>Variables contain definitions of variables that can be used in composition of other expressions. Each variable is defined as a named CEL expression. The variables defined here will be available under <code>variables</code> in other expressions of the policy except MatchConditions because MatchConditions are evaluated before the rest of the policy. The expression of a variable can refer to other variables defined earlier in the list but not those after. Thus, Variables must be sorted by the order of first appearance and acyclic.</p> <code>authorizations</code> <code>[]Authorization</code> <p>Authorizations contain CEL expressions which is used to apply the authorization.</p>"},{"location":"tutorials/","title":"Tutorials","text":"<p>If you didn't read the Quick start section yet, we really recommend giving it a try to discover and familiarise with the project first.</p> <p>TODO: link</p>"},{"location":"tutorials/traefik/","title":"Traefik","text":"<p>Traefik is an open-source Application Proxy that makes publishing your services a fun and easy experience. It receives requests on behalf of your system and identifies which components are responsible for handling them, and routes them securely.</p> <p>This tutorial shows how Traefik's ForwardAuth middleware can be configured to delegate authorization decisions to the Generic Auth Server.</p>"},{"location":"tutorials/traefik/#setup","title":"Setup","text":""},{"location":"tutorials/traefik/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Kubernetes cluster</li> <li>Helm to install Traefik and the Generic Auth Server</li> <li>kubectl to interact with the cluster</li> </ul>"},{"location":"tutorials/traefik/#setup-a-cluster","title":"Setup a cluster","text":"<p>Create a local cluster with kind.</p> <pre><code>KIND_IMAGE=kindest/node:v1.31.1\n\n# create cluster\nkind create cluster --image $KIND_IMAGE --wait 1m\n</code></pre>"},{"location":"tutorials/traefik/#install-traefik","title":"Install Traefik","text":"<p>Install Traefik on the cluster.</p> <pre><code># install traefik\nhelm install traefik --namespace traefik --create-namespace \\\n  --wait --repo https://traefik.github.io/charts traefik \\\n  --values - &lt;&lt;EOF\nservice:\n  type: ClusterIP\ntolerations:\n  - key: node-role.kubernetes.io/control-plane\n    operator: Equal\n    effect: NoSchedule\nEOF\n</code></pre>"},{"location":"tutorials/traefik/#deploy-the-generic-auth-server","title":"Deploy the Generic Auth Server","text":"<p>Now deploy the Generic Auth Server.</p> <pre><code># deploy the generic auth server\nhelm install generic-auth-server --namespace kyverno --create-namespace \\\n  --wait --repo https://eddycharly.github.io/generic-auth-server generic-auth-server\n</code></pre>"},{"location":"tutorials/traefik/#configure-the-forwardauth-middleware","title":"Configure the ForwardAuth middleware","text":"<p>The ForwardAuth middleware will delegate authorization decisions to the Generic Auth Server.</p> <pre><code># configure the forward auth middleware\nkubectl apply -n traefik -f - &lt;&lt;EOF\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: auth\nspec:\n  forwardAuth:\n    address: http://generic-auth-server.kyverno.svc.cluster.local:9081/auth\nEOF\n</code></pre> <p>Notice that the middleware uses the Generic Auth Server url we deployed earlier:</p> <pre><code>[...]\n  forwardAuth:\n    address: http://generic-auth-server.kyverno.svc.cluster.local:9081/auth\n[...]\n</code></pre>"},{"location":"tutorials/traefik/#deploy-a-sample-application","title":"Deploy a sample application","text":"<p>We will use the <code>whoami</code> sample application that can be used to test HTTP requests and helps to show quickly how we can play with the request and response attributes.</p> <pre><code># create the demo namespace\nkubectl create ns demo\n\n# deploy the httpbin application\nkubectl apply -n demo -f - &lt;&lt;EOF\nkind: Deployment\napiVersion: apps/v1\nmetadata:\n  name: whoami\n  labels:\n    app: whoami\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: whoami\n  template:\n    metadata:\n      labels:\n        app: whoami\n    spec:\n      containers:\n        - name: whoami\n          image: traefik/whoami\n          ports:\n            - name: web\n              containerPort: 80\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: whoami\nspec:\n  ports:\n    - name: web\n      port: 80\n      targetPort: web\n\n  selector:\n    app: whoami\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: whoami-ingress\n  annotations:\n    traefik.ingress.kubernetes.io/router.middlewares: traefik-auth@kubernetescrd\nspec:\n  rules:\n  - host: foo.bar.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: whoami\n            port:\n              name: web\nEOF\n</code></pre> <p>Notice that the ingress references our middleware using annotations:</p> <pre><code>[...]\n  annotations:\n    traefik.ingress.kubernetes.io/router.middlewares: traefik-auth@kubernetescrd\n[...]\n</code></pre>"},{"location":"tutorials/traefik/#create-an-authorizationpolicy","title":"Create an AuthorizationPolicy","text":"<p>In summary the policy below does the following:</p> <ul> <li>Checks if the incoming request contains the header <code>x-force-authorized</code> with the value <code>enabled</code> or <code>true</code></li> <li>Allows the request if it has the header or denies it if not</li> </ul> <pre><code># deploy authorization policy\nkubectl apply -f - &lt;&lt;EOF\napiVersion: generic.kyverno.io/v1alpha1\nkind: AuthorizationPolicy\nmetadata:\n  name: demo-policy.example.com\nspec:\n  variables:\n  - name: force_authorized\n    expression: &gt;\n      object.Header(\"x-force-authorized\")\n  - name: allowed\n    expression: &gt;\n      \"enabled\" in variables.force_authorized || \"true\" in variables.force_authorized\n  authorizations:\n  - expression: &gt;\n      variables.allowed\n        ? auth\n            .Response(200)\n        : auth\n            .Response(401)\n            .WithBody(\"bye\")\n            .WithHeader(\"reason\", \"not allowed\") \nEOF\n</code></pre>"},{"location":"tutorials/traefik/#testing","title":"Testing","text":"<p>At this point we have deployed and configured Traefik, the Generic Auth Server, a sample application, and an authorization policies.</p>"},{"location":"tutorials/traefik/#start-an-in-cluster-shell","title":"Start an in-cluster shell","text":"<p>Let's start a pod in the cluster with a shell to call into the sample application.</p> <pre><code># run an in-cluster shell\nkubectl run -i -t busybox --image=alpine --restart=Never -n demo\n</code></pre>"},{"location":"tutorials/traefik/#install-curl","title":"Install curl","text":"<p>We will use curl to call into the sample application but it's not installed in our shell, let's install it in the pod.</p> <pre><code># install curl\napk add curl\n</code></pre>"},{"location":"tutorials/traefik/#call-into-the-sample-application","title":"Call into the sample application","text":"<p>Now we can send requests to the sample application and verify the result.</p> <p>The following request will return <code>401</code> (denied by our policy):</p> <pre><code>curl -s -w \"\\nhttp_code=%{http_code}\" http://traefik.traefik.svc.cluster.local \\\n  -H \"Host: foo.bar.com\"\n</code></pre> <p>The following request will return <code>200</code> (allowed by our policy):</p> <pre><code>curl -s -w \"\\nhttp_code=%{http_code}\" http://traefik.traefik.svc.cluster.local \\\n  -H \"Host: foo.bar.com\" \\\n  -H \"x-force-authorized: true\"\n</code></pre>"},{"location":"tutorials/traefik/#wrap-up","title":"Wrap Up","text":"<p>Congratulations on completing the tutorial!</p> <p>This tutorial demonstrated how to configure Traefik\u2019s ForwardAuth middleware to utilize the Generic Auth Server as an external authorization service.</p>"}]}